/* global jest test expect */

const checkServerIdentity = require('./checkServerIdentity')
const tls = require('tls')

jest.mock('tls')

const mockCertSigFailErr = { code: 'CERT_SIGNATURE_FAILURE' }
const mockAltNameInvalidErr = { code: 'ERR_TLS_CERT_ALTNAME_INVALID' }
const mockHost = 'localhost'
const mockCert = '__mock-cert__'

test(
  'it should return any errors generated by tls.checkServerIdentity',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockCertSigFailErr)

    expect(checkServerIdentity(mockHost, mockCert)).toEqual(mockCertSigFailErr)
  }
)

test(
  // eslint-disable-next-line max-len
  'it should return errors with the code ERR_TLS_CERT_ALTNAME_INVALID when `catIgnoreMismatchedHostName: false`',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockAltNameInvalidErr)

    expect(checkServerIdentity(
      mockHost,
      mockCert,
      { catIgnoreMismatchedHostName: false }
    ))
      .toEqual(mockAltNameInvalidErr)
  }
)

test(
  'it should not return errors with the code ERR_TLS_CERT_ALTNAME_INVALID',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockAltNameInvalidErr)

    expect(checkServerIdentity(mockHost, mockCert))
      .toBe(undefined)
  }
)

test(
  'it should return undefined when tls.checkServerIdentity returns undefined',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(undefined)

    expect(checkServerIdentity(mockHost, mockCert)).toBe(undefined)
  }
)
