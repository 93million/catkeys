/* global jest test expect */

const checkServerIdentity = require('./checkServerIdentity')
const tls = require('tls')

jest.mock('tls')

const mockCertSigFailErr = { code: 'CERT_SIGNATURE_FAILURE' }
const mockAltNameInvalidErr = { code: 'ERR_TLS_CERT_ALTNAME_INVALID' }
const mockHost = 'localhost'
const mockServerCert = { subject: { CN: '__catkeys_server__' } }
const mockClientCert = { subject: { CN: 'client' } }
const mockServerCertCustomName = {
  subject: { CN: 'catkeys.example.com' }
}

test(
  'it should return any errors generated by tls.checkServerIdentity',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockCertSigFailErr)

    expect(checkServerIdentity(mockHost, mockServerCert))
      .toEqual(mockCertSigFailErr)
  }
)

test(
  // eslint-disable-next-line max-len
  'it should return errors with the code ERR_TLS_CERT_ALTNAME_INVALID when `catRejectMismatchedHostname: true` and server cert contains custom common name',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockAltNameInvalidErr)

    expect(checkServerIdentity(
      mockHost,
      mockServerCertCustomName,
      { catRejectMismatchedHostname: true }
    ))
      .toMatchObject(mockAltNameInvalidErr)
  }
)

test(
  // eslint-disable-next-line max-len
  'it should return errors with the code ERR_TLS_CERT_ALTNAME_INVALID when `catRejectMismatchedHostname: true` and server cert contains no common name',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockAltNameInvalidErr)

    expect(checkServerIdentity(
      mockHost,
      mockServerCert,
      { catRejectMismatchedHostname: true }
    ))
      .toMatchObject(mockAltNameInvalidErr)
  }
)

test(
  // eslint-disable-next-line max-len
  'it should return error with descriptive message when `catRejectMismatchedHostname: true` and server cert contains no common name',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockAltNameInvalidErr)

    expect(checkServerIdentity(
      mockHost,
      mockServerCert,
      { catRejectMismatchedHostname: true }
    ))
      .toHaveProperty(
        'message',
        expect.stringMatching(/server key contains no name/)
      )
  }
)

test(
  // eslint-disable-next-line max-len
  'it should not return errors with the code ERR_TLS_CERT_ALTNAME_INVALID when connecting to servers with server keys',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockAltNameInvalidErr)

    expect(checkServerIdentity(mockHost, mockServerCert))
      .toBe(undefined)
  }
)

test(
  'it should return undefined when tls.checkServerIdentity returns undefined',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(undefined)

    expect(checkServerIdentity(mockHost, mockServerCert)).toBe(undefined)
  }
)

test(
  // eslint-disable-next-line max-len
  'it should not return errors with the code ERR_TLS_CERT_ALTNAME_INVALID when connecting to servers with client keys',
  () => {
    tls.checkServerIdentity.mockReturnValueOnce(mockAltNameInvalidErr)

    expect(checkServerIdentity(mockHost, mockClientCert))
      .toEqual(mockAltNameInvalidErr)
  }
)
